    def duplicate_graph_dual(self, csv):
        df = pd.read_csv(csv, header=None, names=self.METRICS_HEADER)

        # Find the global maximum value of total_seeds
        max_total_seeds = df['total_seeds'].max()
        
        df['valid_seeds'] = df['total_seeds'] - df['total_duplicate_seeds'] - df['total_seeds_with_invalid_struct']

        # Normalize the total_duplicate_seeds and total_seeds by the global max
        df['duplicate_percentage'] = (df['total_duplicate_seeds'] / max_total_seeds) * 100
        df['duplicate_rate'] = (df['total_duplicate_seeds'] / max_total_seeds)

        df['performance_score'] = df['total_seeds'] * (1 - df['duplicate_rate'])
        
        # Normalize Performance Score to 0-100
        min_score = df['performance_score'].min()
        max_score = df['performance_score'].max()
        df['normalized_performance_score'] = (
            (df['performance_score'] - min_score) / (max_score - min_score) * 100
        )
        
        result = (
            df.groupby(['model', 'temperature'])
            #df.groupby(['model'])            
            .apply(lambda group: pd.Series({
                'duplicate_percentage': group['duplicate_percentage'].mean(),
                'performance_score': group['normalized_performance_score'].mean(),
                'mean_seeds': round(group['total_seeds'].mean())  # Calculate mean number of seeds
            }))
            .reset_index()            
        )        

        result_model = (
            df.groupby(['model'])            
            .apply(lambda group: pd.Series({
                'duplicate_percentage': group['duplicate_percentage'].mean(),
                'performance_score': group['normalized_performance_score'].mean(),
                'mean_seeds': round(group['total_seeds'].mean())  # Calculate mean number of seeds
            }))
            .reset_index()            
        )        

        
        result['uniq_percentage'] = 100 - result["duplicate_percentage"]
        result_model['uniq_percentage'] = 100 - result["duplicate_percentage"]        
        
        result = result.sort_values(by=['performance_score'], ascending=False)
        
        result = result.sort_values(by=['model', 'temperature'], ascending=False)        
        plt.figure(figsize=(10, 6))

        # Create a dual-axis plot
        fig, ax1 = plt.subplots(figsize=(10, 6))

        # Plot performance score on the primary axis
        for model in result['model'].unique():
            model_data = result[result['model'] == model]
            ax1.plot(
                model_data['temperature'],
                model_data['performance_score'],
                #model_data['duplicate_percentage'],
                label=f'Model {model}',
                marker='o',  # Add markers at each point
                linestyle='-',  # Solid line
                linewidth=2
            )

        ax1.set_xlabel('Temperature', fontsize=14)
        ax1.set_ylabel('Seed unique ratio (%)', fontsize=14, color='blue')
        ax1.set_xlim(0.0, 1.2)
        ax1.set_ylim(0, 100)
        ax1.grid(alpha=0.3)

        # Secondary y-axis for mean seeds
        ax2 = ax1.twinx()
        for model in result['model'].unique():
            model_data = result[result['model'] == model]
            ax2.plot(
                model_data['temperature'],
                model_data['mean_seeds'],
                #label=f'{model} Total Seeds',
                marker='x',  # Add different markers
                linestyle='--',  # Dashed line
                linewidth=2
            )

        ax2.set_ylabel('Total Seeds', fontsize=14, color='orange')
        ax2.set_ylim(0, result['mean_seeds'].max() + 10)

        # Combine legends for both axes
        lines1, labels1 = ax1.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax1.legend(lines1 + lines2, labels1 + labels2, loc='best', fontsize=12)

        # Add title
        plt.title('Performance Score over Uniqueness Total Seeds vs Temperature', fontsize=16)

        # Save and show the plot
        plt.tight_layout()
        plt.savefig('line_plote_perf_score_dual_axis.pdf', bbox_inches="tight")


    def duplicate_graph_simple(self, csv):
        df = pd.read_csv(csv)

        # Find the global maximum value of total_seeds
        max_total_seeds = df['total_seeds'].max()
        
        df['valid_seeds'] = df['total_seeds'] - df['total_duplicate_seeds'] - df['total_seeds_with_invalid_struct']

        # Normalize the total_duplicate_seeds and total_seeds by the global max
        df['duplicate_percentage'] = (df['total_duplicate_seeds'] / max_total_seeds) * 100
        df['duplicate_rate'] = (df['total_duplicate_seeds'] / max_total_seeds)

        df['performance_score'] = df['total_seeds'] * (1 - df['duplicate_rate'])
        
        # Normalize Performance Score to 0-100
        min_score = df['performance_score'].min()
        max_score = df['performance_score'].max()
        df['normalized_performance_score'] = (
            (df['performance_score'] - min_score) / (max_score - min_score) * 100
        )
        
        result = (
            df.groupby(['model', 'temperature'])
            #df.groupby(['model'])            
            .apply(lambda group: pd.Series({
                'duplicate_percentage': group['duplicate_percentage'].mean(),
                'performance_score': group['normalized_performance_score'].mean(),
                'mean_seeds': round(group['total_seeds'].mean())  # Calculate mean number of seeds
            }))
            .reset_index()            
        )        
               
        # Round values
        result['duplicate_percentage'] = result['duplicate_percentage'].round(2)
        result['performance_score'] = result['performance_score'].round(2)
        result['mean_seeds'] = result['mean_seeds'].round(2)

        # Line Plot
        plt.figure(figsize=(10, 6))

        # Plot each model's grouped data
        for model in result['model'].unique():
            model_data = result[result['model'] == model]
            plt.plot(
                model_data['temperature'],
                model_data['performance_score'],
                label=f'Model {model}',
                marker='o',  # Add markers at each point
                linestyle='-',  # Solid line
                linewidth=2
            )

        # Labels and title
        plt.title('Seed unique/capacity generation ratio vs Temperature', fontsize=16)
        plt.xlabel('Temperature', fontsize=14)
        plt.ylabel('Seed unique/capacity generation ratio (%)', fontsize=14)
        plt.xlim(0.0, 1.2)
        plt.ylim(0, 100)
        plt.grid(alpha=0.3)
        plt.legend(fontsize=12, loc='best')

        # Show plot
        plt.tight_layout()
        plt.savefig('line_plot_perf.pdf', bbox_inches="tight")


    def duplicate_cluster_quality_temp(self, csv):
        df = self.build_perf_score_seeds_args_funcs(csv)

        # Aggregate data by model and temperature
        result = (
            df.groupby(['model', 'temperature'])
            .apply(lambda group: pd.Series({
                'performance_score': group['normalized_performance_score'].mean()
            }))
            .reset_index()
        )

        # Sort the results by performance score
        result = result.sort_values(by=['performance_score'], ascending=False)

        # Prepare the data for visualization
        models = result['model'].unique()

        # Sort temperatures in ascending order for each model
        temperatures = sorted(result['temperature'].unique())

        # Prepare the data for each model and temperature (ordered by temperature)
        performance_score_values = []

        for temp in temperatures:
            performance_score_row = []
            for model in models:
                row = result[(result['model'] == model) & (result['temperature'] == temp)]
                if not row.empty:
                    performance_score_row.append(row['performance_score'].values[0])
                else:
                    performance_score_row.append(0)  # If no data for a model-temperature pair
            performance_score_values.append(performance_score_row)

        # Set the x locations for the groups (temperatures), with added space between each temperature
        x = np.arange(len(temperatures)) * 3  # Multiply by 3 to increase space between each cluster
        width = 0.5  # The width of the bars

        # Create the figure
        fig, ax = plt.subplots(figsize=(14, 8))

        model_colors = {
            "Llama3-70B": "#1f77b4",
            "Llama3-8B": "#ff7f0e",
            "gpt4omini": "#2ca02c",
            "mixtral-8x7b": "#d62728",
            "gemini-1.5-flash": "#9467bd"
        }

        # Plot bars for Performance Score
        for i, temp in enumerate(temperatures):
            for j, model in enumerate(models):
                # Adjust color intensity for the models
                base_color = to_rgba(model_colors.get(model, "#7f7f7f"))  # Default to gray if model color is missing

                # Adjust color intensity for the models
                base_intensity = 0.7
                variation_range = 0.2
                color_intensity = base_intensity + variation_range * (j / (len(models) - 1))
                adjusted_color = (base_color[0] * color_intensity, 
                                base_color[1] * color_intensity, 
                                base_color[2] * color_intensity, 
                                base_color[3])  # Maintain alpha

                # Plot Performance Score
                ax.bar(x[i] + j * width, performance_score_values[i][j], width, color=adjusted_color)

                # Add the model label below the bars
                ax.text(
                    x[i] + j * width,
                    -1,  # Position below the x-axis
                    f"{model}",
                    ha="center",
                    va="top",
                    rotation=90,
                    fontsize=10,
                )

        # Customize the chart
        ax.set_ylabel("Seed Quality Score (%)")  # Updated label to indicate percentage
        ax.set_title("Seed Quality Score per Temperature and Model")

        # Set the x-axis ticks to be in the center of each cluster
        ax.set_xticks(x + width * (len(models) - 1) / 2)
        ax.set_xticklabels(temperatures)  # Set x-axis tick labels to temperatures

        # Adjust margins to create more space for the model labels
        plt.subplots_adjust(bottom=0.2)  # Increase bottom margin

        # Set the y-axis to be in percentage
        ax.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{x:.0f}%'))  # Format y-axis as percentage

        # Display the plot
        plt.tight_layout()
        
        plt.savefig('bar_cluster_quality_score_2.pdf', bbox_inches="tight")      


    def duplicate_cluster_quality_simple(self, csv):
        #df = self.build_perf_score_seeds(csv)        
        df = self.build_perf_score_seeds_args_funcs(csv)

        # Aggregate data by model and temperature
        result = (
            df.groupby(['model', 'temperature'])
            .apply(lambda group: pd.Series({
                'performance_score': group['normalized_performance_score'].mean()
            }))
            .reset_index()
        )

        # Sort the results by performance score
        result = result.sort_values(by=['performance_score'], ascending=False)

        # Prepare the data for visualization
        models = result['model'].unique()

        # Sort temperatures in ascending order for each model
        temperatures = sorted(result['temperature'].unique())

        # Prepare the data for each model and temperature (ordered by temperature)
        performance_score_values = []

        for model in models:
            performance_score_row = []
            for temp in temperatures:
                row = result[(result['model'] == model) & (result['temperature'] == temp)]
                if not row.empty:
                    performance_score_row.append(row['performance_score'].values[0])
            performance_score_values.append(performance_score_row)

        # Set the x locations for the groups (models), with added space between each model
        x = np.arange(len(models)) * 3  # Multiply by 3 to increase space between each cluster
        width = 0.3  # The width of the bars

        # Create the figure
        fig, ax = plt.subplots(figsize=(14, 8))

        model_colors = {
            "Llama3-70B": "#1f77b4",
            "Llama3-8B": "#ff7f0e",
            "gpt4omini": "#2ca02c",
            "mixtral-8x7b": "#d62728",
            "gemini-1.5-flash": "#9467bd"            
        }

        # Plot bars for Performance Score
        for j, model in enumerate(models):
            base_color = to_rgba(model_colors.get(model, "#7f7f7f"))  # Default to gray if model color is missing

            for i, temp in enumerate(temperatures):
                # Adjust color intensity for the temperatures
                base_intensity = 0.7
                variation_range = 0.2
                color_intensity = base_intensity + variation_range * (i / (len(temperatures) - 1))
                adjusted_color = (base_color[0] * color_intensity, 
                                base_color[1] * color_intensity, 
                                base_color[2] * color_intensity, 
                                base_color[3])  # Maintain alpha

                # Plot Performance Score
                ax.bar(x[j] + i * width, performance_score_values[j][i], width, color=adjusted_color)

                # Add the temperature label below the bars
                ax.text(
                    x[j] + i * width,
                    -1,  # Position below the x-axis
                    f"{temp}",
                    ha="center",
                    va="top",
                    rotation=90,
                    fontsize=10,
                )

        # Customize the chart
        ax.set_ylabel("Seed Quality Score (%)")  # Updated label to indicate percentage
        ax.set_title("Seed Quality Score per Model and Temperature")

        # Set the x-axis ticks to be in the center of each cluster
        ax.set_xticks(x + width * (len(temperatures) - 1) / 2)
        ax.set_xticklabels([])  # Remove x-axis tick labels

        # Add legend for models
        ax.legend(
            [plt.Rectangle((0, 0), 1, 1, color=model_colors[model]) for model in models],
            models,
            title="Models",
        )

        # Adjust margins to create more space for the temperature labels
        plt.subplots_adjust(bottom=0.1)  # Increase bottom margin

        # Set the y-axis to be in percentage
        ax.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{x:.0f}%'))  # Format y-axis as percentage
                   
        # Display the plot
        plt.tight_layout()

        plt.savefig('bar_cluster_quality_score.pdf', bbox_inches="tight")
