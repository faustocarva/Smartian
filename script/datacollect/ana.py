import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Read the CSV data
METRICS_HEADER = 'model,temperature,file,total_files,total_files_with_invalid_json,total_seeds,total_duplicate_seeds,total_seeds_with_invalid_struct,total_args_in_seeds,total_invalid_args_in_seeds,total_functions_in_seeds,total_invalid_function_in_seeds'.split(',')
df = pd.read_csv("metrics", header=None, names=METRICS_HEADER)

# Data Cleaning and Preprocessing
def preprocess_data(dataframe):
    # Determine global maximum seeds
    global_max_seeds = dataframe['total_seeds'].max()
    
    # Group by model and temperature, aggregate key metrics
    grouped = dataframe.groupby(['model', 'temperature']).agg({
        'total_seeds': ['mean', 'std', 'max'],
        'total_files_with_invalid_json': ['mean', 'max'],
        'total_seeds_with_invalid_struct': ['mean', 'max'],
        'total_invalid_args_in_seeds': ['mean', 'max'],
        'total_args_in_seeds': ['mean', 'max'],
        'total_functions_in_seeds': ['mean', 'std'],
        'total_invalid_function_in_seeds': ['mean', 'max']
    }).reset_index()
    
    # Flatten multi-level column names
    grouped.columns = [
        'model', 'temperature', 
        'total_seeds_mean', 'total_seeds_std', 'total_seeds_max',
        'invalid_json_mean', 'invalid_json_max',
        'invalid_struct_mean', 'invalid_struct_max',
        'invalid_args_mean', 'invalid_args_max',
        'functions_mean', 'functions_std',
        'invalid_functions_mean', 'invalid_functions_max'
    ]
    
    # Add global maximum seeds as a reference
    grouped['global_max_seeds'] = global_max_seeds
    
    return grouped

# Compute Performance Metrics
def compute_performance_metrics(dataframe):
    # Relative seed generation score (compared to global maximum)
    dataframe['relative_seed_generation_score'] = (
        dataframe['total_seeds_mean'] / dataframe['global_max_seeds']
    )
    
    # Invalid metrics penalty
    dataframe['invalid_penalty'] = (
        dataframe['invalid_json_mean'] + 
        dataframe['invalid_struct_mean'] + 
        dataframe['invalid_args_mean'] + 
        dataframe['invalid_functions_mean']
    )
    
    # Comprehensive seed quality score
    dataframe['seed_quality_score'] = (
        dataframe['relative_seed_generation_score'] / 
        (1 + dataframe['invalid_penalty'])
    )
    
    # Function generation efficiency
    dataframe['function_efficiency'] = (
        dataframe['functions_mean'] / 
        (1 + dataframe['invalid_functions_mean'])
    )
    
    # Normalized comprehensive performance score
    dataframe['comprehensive_performance_score'] = (
        0.7 * dataframe['seed_quality_score'] + 
        0.3 * (dataframe['function_efficiency'] / dataframe['function_efficiency'].max())
    )
    
    return dataframe

# Visualization Functions
def plot_performance_analysis(processed_data):
    plt.figure(figsize=(16, 12))
    
    # Seed Generation Performance
    plt.subplot(2, 2, 1)
    for model in processed_data['model'].unique():
        model_data = processed_data[processed_data['model'] == model]
        plt.plot(model_data['temperature'], model_data['total_seeds_mean'], 
                 marker='o', label=model)
    plt.title('Average Seeds Generated by Temperature')
    plt.xlabel('Temperature')
    plt.ylabel('Average Total Seeds')
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.grid(True)
    
    # Relative Seed Generation Score
    plt.subplot(2, 2, 2)
    for model in processed_data['model'].unique():
        model_data = processed_data[processed_data['model'] == model]
        plt.plot(model_data['temperature'], model_data['relative_seed_generation_score'], 
                 marker='o', label=model)
    plt.title('Relative Seed Generation Score')
    plt.xlabel('Temperature')
    plt.ylabel('Relative Seed Generation Score')
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.grid(True)
    
    # Seed Quality Score
    plt.subplot(2, 2, 3)
    for model in processed_data['model'].unique():
        model_data = processed_data[processed_data['model'] == model]
        plt.plot(model_data['temperature'], model_data['seed_quality_score'], 
                 marker='o', label=model)
    plt.title('Seed Quality Score by Temperature')
    plt.xlabel('Temperature')
    plt.ylabel('Seed Quality Score')
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.grid(True)
    
    # Comprehensive Performance Score
    plt.subplot(2, 2, 4)
    for model in processed_data['model'].unique():
        model_data = processed_data[processed_data['model'] == model]
        plt.plot(model_data['temperature'], model_data['comprehensive_performance_score'], 
                 marker='o', label=model)
    plt.title('Comprehensive Performance Score')
    plt.xlabel('Temperature')
    plt.ylabel('Comprehensive Performance Score')
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.grid(True)
    
    plt.tight_layout()
    plt.savefig('model_performance_analysis.png', bbox_inches='tight')
    plt.close()

def generate_detailed_report(processed_data):
    print("Comprehensive Performance Analysis:")
    
    # Top performers by comprehensive performance score
    print("\nTop 5 Model-Temperature Combinations by Comprehensive Performance Score:")
    top_comprehensive = processed_data.nlargest(5, 'comprehensive_performance_score')
    print(top_comprehensive[['model', 'temperature', 'comprehensive_performance_score', 'total_seeds_mean']])
    
    # Top performers by seed quality score
    print("\nTop 5 Model-Temperature Combinations by Seed Quality Score:")
    top_seed_quality = processed_data.nlargest(5, 'seed_quality_score')
    print(top_seed_quality[['model', 'temperature', 'seed_quality_score', 'total_seeds_mean']])
    
    # Model-level summary
    print("\nModel Performance Summary:")
    summary = processed_data.groupby('model').agg({
        'comprehensive_performance_score': ['mean', 'max'],
        'seed_quality_score': ['mean', 'max'],
        'total_seeds_mean': ['mean', 'max']
    })
    print(summary)

# Main Analysis Pipeline
def main_analysis(dataframe):
    # Preprocess data
    pd.set_option('display.max_columns', None)  # Show all columns
    pd.set_option('display.width', 1000)       # Increase display width for better formatting
    
    processed_df = preprocess_data(dataframe)
    print(processed_df)
    # Compute performance metrics
    processed_df = compute_performance_metrics(processed_df)
    print(processed_df)
    return    
    # Generate visualizations
    plot_performance_analysis(processed_df)
    
    # Generate detailed report
    generate_detailed_report(processed_df)
    
    return processed_df

# Run the analysis
results = main_analysis(df)




















# # Data Cleaning and Preprocessing
# def preprocess_data(dataframe):
#     # Group by model and temperature, aggregate key metrics
#     grouped = dataframe.groupby(['model', 'temperature']).agg({
#         'total_seeds': ['mean', 'std'],
#         'total_files_with_invalid_json': ['mean', 'max'],
#         'total_seeds_with_invalid_struct': ['mean', 'max'],
#         'total_invalid_args_in_seeds': ['mean', 'max'],
#         'total_functions_in_seeds': ['mean', 'std'],
#         'total_invalid_function_in_seeds': ['mean', 'max']
#     }).reset_index()
    
#     # Flatten multi-level column names
#     grouped.columns = [
#         'model', 'temperature', 
#         'total_seeds_mean', 'total_seeds_std',
#         'invalid_json_mean', 'invalid_json_max',
#         'invalid_struct_mean', 'invalid_struct_max',
#         'invalid_args_mean', 'invalid_args_max',
#         'functions_mean', 'functions_std',
#         'invalid_functions_mean', 'invalid_functions_max'
#     ]
    
#     return grouped

# # Compute Performance Metrics
# def compute_performance_metrics(dataframe):
#     # Calculate seed quality score with more nuanced approach
#     # Prioritize total seeds (more is better)
#     # Penalize invalid metrics
#     dataframe['seed_quality_score'] = (
#         dataframe['total_seeds_mean'] / (
#             1 + 
#             dataframe['invalid_json_mean'] + 
#             dataframe['invalid_struct_mean'] + 
#             dataframe['invalid_args_mean'] + 
#             dataframe['invalid_functions_mean']
#         )
#     )
    
#     # Normalize seed quality score to make it more interpretable
#     dataframe['normalized_seed_quality_score'] = (
#         (dataframe['seed_quality_score'] - dataframe['seed_quality_score'].min()) / 
#         (dataframe['seed_quality_score'].max() - dataframe['seed_quality_score'].min())
#     )
    
#     # Calculate function generation efficiency
#     dataframe['function_efficiency'] = (
#         dataframe['functions_mean'] / 
#         (1 + dataframe['invalid_functions_mean'])
#     )
    
#     # Normalized function efficiency
#     dataframe['normalized_function_efficiency'] = (
#         (dataframe['function_efficiency'] - dataframe['function_efficiency'].min()) / 
#         (dataframe['function_efficiency'].max() - dataframe['function_efficiency'].min())
#     )
    
#     # Comprehensive performance score
#     dataframe['comprehensive_performance_score'] = (
#         0.6 * dataframe['normalized_seed_quality_score'] + 
#         0.4 * dataframe['normalized_function_efficiency']
#     )
    
#     return dataframe

# # Visualization Functions
# def plot_seed_generation_performance(processed_data):
#     plt.figure(figsize=(15, 8))
    
#     # Create a subplot grid
#     plt.subplot(2, 1, 1)
    
#     # Seed Generation Performance
#     for model in processed_data['model'].unique():
#         model_data = processed_data[processed_data['model'] == model]
#         plt.plot(model_data['temperature'], model_data['total_seeds_mean'], 
#                  marker='o', label=model)
    
#     plt.title('Seed Generation Performance by Temperature')
#     plt.xlabel('Temperature')
#     plt.ylabel('Average Total Seeds')
#     plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
#     plt.grid(True)
    
#     # Comprehensive Performance Score
#     plt.subplot(2, 1, 2)
#     for model in processed_data['model'].unique():
#         model_data = processed_data[processed_data['model'] == model]
#         plt.plot(model_data['temperature'], model_data['comprehensive_performance_score'], 
#                  marker='o', label=model)
    
#     plt.title('Comprehensive Performance Score by Temperature')
#     plt.xlabel('Temperature')
#     plt.ylabel('Comprehensive Performance Score')
#     plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
#     plt.grid(True)
    
#     plt.tight_layout()
#     plt.savefig('seed_generation_performance.png', bbox_inches='tight')
#     plt.close()

# def plot_seed_quality_heatmap(processed_data):
#     plt.figure(figsize=(15, 10))
    
#     # Comprehensive Performance Score Heatmap
#     plt.subplot(2, 1, 1)
#     pivot_data = processed_data.pivot(
#         index='model', 
#         columns='temperature', 
#         values='comprehensive_performance_score'
#     )
    
#     sns.heatmap(pivot_data, annot=True, cmap='YlGnBu', fmt='.2f')
#     plt.title('Comprehensive Performance Score by Model and Temperature')
    
#     # Seed Quality Score Heatmap
#     plt.subplot(2, 1, 2)
#     pivot_data = processed_data.pivot(
#         index='model', 
#         columns='temperature', 
#         values='normalized_seed_quality_score'
#     )
    
#     sns.heatmap(pivot_data, annot=True, cmap='YlGnBu', fmt='.2f')
#     plt.title('Normalized Seed Quality Score by Model and Temperature')
    
#     plt.tight_layout()
#     plt.savefig('seed_quality_heatmap.png')
#     plt.close()

# def generate_detailed_report(processed_data):
#     # Detailed performance analysis
#     print("Comprehensive Performance Analysis:")
#     print("\nTop 5 Model-Temperature Combinations by Comprehensive Performance Score:")
#     top_comprehensive = processed_data.nlargest(5, 'comprehensive_performance_score')
#     print(top_comprehensive[['model', 'temperature', 'comprehensive_performance_score', 'total_seeds_mean']])
    
#     print("\nTop 5 Model-Temperature Combinations by Seed Quality Score:")
#     top_seed_quality = processed_data.nlargest(5, 'normalized_seed_quality_score')
#     print(top_seed_quality[['model', 'temperature', 'normalized_seed_quality_score', 'total_seeds_mean']])
    
#     print("\nModel Performance Summary:")
#     summary = processed_data.groupby('model').agg({
#         'comprehensive_performance_score': ['mean', 'max'],
#         'total_seeds_mean': ['mean', 'max']
#     })
#     print(summary)

# # Main Analysis Pipeline
# def main_analysis(dataframe):
#     # Preprocess data
#     processed_df = preprocess_data(dataframe)
    
#     # Compute performance metrics
#     processed_df = compute_performance_metrics(processed_df)
    
#     # Generate visualizations
#     plot_seed_generation_performance(processed_df)
#     plot_seed_quality_heatmap(processed_df)
    
#     # Generate detailed report
#     generate_detailed_report(processed_df)
    
#     return processed_df

# # Run the analysis
# results = main_analysis(df)