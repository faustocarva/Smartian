import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

class DataCollect():

    def __init__(self) -> None:
        print("")
    
    def seeds(self, csv):
        df = pd.read_csv(csv)
        result = (
            df.groupby(['model', 'temperature'])
            #df.groupby(['model'])            
            .apply(lambda group: pd.Series({
                'mean_seeds': round(group['total_seeds'].mean())  # Calculate mean number of seeds
            }))
            .reset_index()            
        )        
        plt.figure(figsize=(10, 6))

        # Plot each model's grouped data
        for model in result['model'].unique():
            model_data = result[result['model'] == model]
            plt.plot(
                model_data['temperature'],
                model_data['mean_seeds'],
                label=f'Model {model}',
                marker='o',  # Add markers at each point
                linestyle='-',  # Solid line
                linewidth=2
            )

        # Labels and title
        plt.title('Average total seeds generated by Model over Temperature', fontsize=16)
        plt.xlabel('Temperature', fontsize=14)
        plt.ylabel('Total seeds', fontsize=14)
        plt.xlim(0.0, 1.2)
        plt.grid(alpha=0.3)
        plt.legend(fontsize=12, loc='best')

        # Show plot
        plt.tight_layout()
        plt.savefig('plot_total_seeds_by_model_temperature.png', dpi=300)        
        
        
        ########################################################################################################
        
        # Calculate mean seeds grouped by model and temperature
        result_by_model_temp = (
            df.groupby(['model', 'temperature'])
            .apply(lambda group: pd.Series({
                'mean_seeds': round(group['total_seeds'].mean())
            }))
            .reset_index()
        )

        # Calculate mean seeds grouped by model only
        result_by_model = (
            df.groupby(['model'])
            .apply(lambda group: pd.Series({
                'mean_seeds': round(group['total_seeds'].mean())
            }))
            .reset_index()
        )
        print(result_by_model)
        # Plot
        plt.figure(figsize=(10, 6))

        # Plot data grouped by model and temperature
        for model in result_by_model_temp['model'].unique():
            model_data_temp = result_by_model_temp[result_by_model_temp['model'] == model]
            plt.plot(
                model_data_temp['temperature'],
                model_data_temp['mean_seeds'],
                label=f'{model} (By Model & Temperature)',
                marker='o',
                linestyle='-',  # Solid line
                linewidth=2
            )

        # Plot data grouped by model only
        for model in result_by_model['model']:
            mean_seed = result_by_model[result_by_model['model'] == model]['mean_seeds'].values[0]
            plt.axhline(
                y=mean_seed,
                color='gray',
                linestyle='--',
                label=f'{model} (Overall Mean)'
            )

        # Labels and title
        plt.title('Comparison of Mean Seeds: By Model vs By Model & Temperature', fontsize=16)
        plt.xlabel('Temperature', fontsize=14)
        plt.ylabel('Total Seeds', fontsize=14)
        plt.xlim(0.0, 1.2)
        plt.grid(alpha=0.3)
        plt.legend(fontsize=10, loc='best')

        # Show plot
        plt.tight_layout()                
        
        plt.savefig('plot_total_seeds_by_model_temperature_2.png', dpi=300)
        
        
    def duplicate(self, csv):
        df = pd.read_csv(csv)

        # Find the global maximum value of total_seeds
        max_total_seeds = df['total_seeds'].max()

        # Normalize the total_duplicate_seeds and total_seeds by the global max
        df['duplicate_percentage'] = (df['total_duplicate_seeds'] / max_total_seeds) * 100
        df['duplicate_rate'] = (df['total_duplicate_seeds'] / max_total_seeds)

        df['performance_score'] = df['total_seeds'] * (1 - df['duplicate_rate'])
        
        # Normalize Performance Score to 0-100
        min_score = df['performance_score'].min()
        max_score = df['performance_score'].max()
        df['normalized_performance_score'] = (
            (df['performance_score'] - min_score) / (max_score - min_score) * 100
        )
        
        result = (
            df.groupby(['model', 'temperature'])
            #df.groupby(['model'])            
            .apply(lambda group: pd.Series({
                'duplicate_percentage': group['duplicate_percentage'].mean(),
                'performance_score': group['normalized_performance_score'].mean(),
                'mean_seeds': round(group['total_seeds'].mean())  # Calculate mean number of seeds
            }))
            .reset_index()            
        )        
        
        result['uniq_percentage'] = 100 - result["duplicate_percentage"]
        
        result = result.sort_values(by=['performance_score'], ascending=False)
        print(result)
        
        #################################################################################################
        
        result = result.sort_values(by=['model', 'temperature'], ascending=False)        
        plt.figure(figsize=(10, 6))

        # Create a dual-axis plot
        fig, ax1 = plt.subplots(figsize=(10, 6))

        # Plot performance score on the primary axis
        for model in result['model'].unique():
            model_data = result[result['model'] == model]
            ax1.plot(
                model_data['temperature'],
                model_data['performance_score'],
                #model_data['duplicate_percentage'],
                label=f'Model {model}',
                marker='o',  # Add markers at each point
                linestyle='-',  # Solid line
                linewidth=2
            )

        ax1.set_xlabel('Temperature', fontsize=14)
        ax1.set_ylabel('Seed unique ratio (%)', fontsize=14, color='blue')
        ax1.set_xlim(0.0, 1.2)
        ax1.set_ylim(0, 100)
        ax1.grid(alpha=0.3)

        # Secondary y-axis for mean seeds
        ax2 = ax1.twinx()
        for model in result['model'].unique():
            model_data = result[result['model'] == model]
            ax2.plot(
                model_data['temperature'],
                model_data['mean_seeds'],
                #label=f'{model} Total Seeds',
                marker='x',  # Add different markers
                linestyle='--',  # Dashed line
                linewidth=2
            )

        ax2.set_ylabel('Total Seeds', fontsize=14, color='orange')
        ax2.set_ylim(0, result['mean_seeds'].max() + 10)

        # Combine legends for both axes
        lines1, labels1 = ax1.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax1.legend(lines1 + lines2, labels1 + labels2, loc='best', fontsize=12)

        # Add title
        plt.title('Seed unique ratio and Total Seeds vs Temperature', fontsize=16)

        # Save and show the plot
        plt.tight_layout()
        plt.savefig('scatter_plot_dual_axis.png', dpi=300)

        #################################################################################################
        
        # Round values
        result['duplicate_percentage'] = result['duplicate_percentage'].round(2)
        result['performance_score'] = result['performance_score'].round(2)
        result['mean_seeds'] = result['mean_seeds'].round(2)

        # Line Plot
        plt.figure(figsize=(10, 6))

        # Plot each model's grouped data
        for model in result['model'].unique():
            model_data = result[result['model'] == model]
            plt.plot(
                model_data['temperature'],
                model_data['performance_score'],
                label=f'Model {model}',
                marker='o',  # Add markers at each point
                linestyle='-',  # Solid line
                linewidth=2
            )

        # Labels and title
        plt.title('Seed unique/capacity generation ratio vs Temperature', fontsize=16)
        plt.xlabel('Temperature', fontsize=14)
        plt.ylabel('Seed unique/capacity generation ratio (%)', fontsize=14)
        plt.xlim(0.0, 1.2)
        plt.ylim(0, 100)
        plt.grid(alpha=0.3)
        plt.legend(fontsize=12, loc='best')

        # Show plot
        plt.tight_layout()
        plt.savefig('scatter_plot_perf.png', dpi=300)
        
    def valid(self, csv):
        df = pd.read_csv(csv)

        # Find the global maximum value of total_seeds
        max_total_seeds = df['total_seeds'].max()
        max_total_args_in_seeds = df['total_args_in_seeds'].max()
        max_total_functions_in_seeds = df['total_functions_in_seeds'].max()
        print(max_total_args_in_seeds,max_total_functions_in_seeds,max_total_seeds)
        
        df['invalid_args_in_seeds'] = (df['total_invalid_args_in_seeds'] / max_total_args_in_seeds) * 100
        df['invalid_functions_in_seeds'] = (df['total_invalid_function_in_seeds'] / max_total_functions_in_seeds) * 100

        result = (
            df.groupby(['model', 'temperature'])
            #df.groupby(['model'])            
            .apply(lambda group: pd.Series({
                'invalid_args_in_seeds': group['invalid_args_in_seeds'].mean(),
                'invalid_functions_in_seeds': group['invalid_functions_in_seeds'].mean(),
            }))
            .reset_index()            
        )        
        
        result = result.sort_values(by=['model', 'temperature'], ascending=False)
        print(result)

    def coverage(self, csv):
        df = pd.read_csv(csv)
        average_covered_instructions = df.groupby(['model', 'temperature'])['coveredInstructions'].mean().reset_index()
        average_covered_instructions.rename(columns={'coveredInstructions': 'averageCoveredInstructions'}, inplace=True)
        average_covered_instructions = average_covered_instructions.sort_values(by=['averageCoveredInstructions'], ascending=False)
        print(average_covered_instructions)

        average_covered_edges = df.groupby(['model', 'temperature'])['coveredEdges'].mean().reset_index()
        average_covered_edges.rename(columns={'coveredEdges': 'averageCoveredEdges'}, inplace=True)
        average_covered_edges = average_covered_edges.sort_values(by=['averageCoveredEdges'], ascending=False)
        print(average_covered_edges)
        
        average_defusechain = df.groupby(['model', 'temperature'])['coveredDefUseChains'].mean().reset_index()
        average_defusechain.rename(columns={'coveredDefUseChains': 'averageCoveredDefUseChains'}, inplace=True)
        average_defusechain = average_defusechain.sort_values(by=['averageCoveredDefUseChains'], ascending=False)
        print(average_defusechain)
        
        average_bugsfound = df.groupby(['model', 'temperature'])['bugsFound'].mean().reset_index()
        average_bugsfound.rename(columns={'bugsFound': 'averageBugsFound'}, inplace=True)
        average_bugsfound = average_bugsfound.sort_values(by=['averageBugsFound'], ascending=False)
        print(average_bugsfound)
        
        merged_df = (
            average_covered_instructions
            .merge(average_covered_edges, on=['model', 'temperature'])
            .merge(average_defusechain, on=['model', 'temperature'])
            .merge(average_bugsfound, on=['model', 'temperature'])
        )        
        plt.figure(figsize=(12, 8))

        for model in merged_df['model'].unique():
            model_data = merged_df[merged_df['model'] == model]

            # Plot each metric as a separate line
            plt.plot(
                model_data['temperature'],
                model_data['averageCoveredInstructions'],
                label=f'{model} - Avg Covered Instructions',
                linestyle='-', marker='o', linewidth=2
            )
            plt.plot(
                model_data['temperature'],
                model_data['averageCoveredEdges'],
                label=f'{model} - Avg Covered Edges',
                linestyle='--', marker='x', linewidth=2
            )
            plt.plot(
                model_data['temperature'],
                model_data['averageCoveredDefUseChains'],
                label=f'{model} - Avg DefUseChains',
                linestyle='-.', marker='s', linewidth=2
            )
            plt.plot(
                model_data['temperature'],
                model_data['averageBugsFound'],
                label=f'{model} - Avg Bugs Found',
                linestyle=':', marker='^', linewidth=2
            )

        # Labels, title, and legend
        plt.xlabel('Temperature', fontsize=14)
        plt.ylabel('Metrics', fontsize=14)
        plt.title('Metrics vs Temperature (Line Plot)', fontsize=16)
        plt.grid(alpha=0.3)
        plt.legend(fontsize=10, loc='upper right', bbox_to_anchor=(1.3, 1))

        # Adjust layout and show plot
        plt.tight_layout()
        plt.savefig('scatter_plot_coverage.png', dpi=300)
        
    def coverage2(self, csv):
        df = pd.read_csv(csv)        
        # Group and calculate averages for each metric
        average_covered_instructions = df.groupby(['model', 'temperature'])['coveredInstructions'].mean().reset_index()
        average_covered_instructions.rename(columns={'coveredInstructions': 'averageCoveredInstructions'}, inplace=True)
        average_covered_instructions = average_covered_instructions.sort_values(by=['model', 'temperature'])

        average_covered_edges = df.groupby(['model', 'temperature'])['coveredEdges'].mean().reset_index()
        average_covered_edges.rename(columns={'coveredEdges': 'averageCoveredEdges'}, inplace=True)
        average_covered_edges = average_covered_edges.sort_values(by=['model', 'temperature'])

        average_defusechain = df.groupby(['model', 'temperature'])['coveredDefUseChains'].mean().reset_index()
        average_defusechain.rename(columns={'coveredDefUseChains': 'averageCoveredDefUseChains'}, inplace=True)
        average_defusechain = average_defusechain.sort_values(by=['model', 'temperature'])

        average_bugsfound = df.groupby(['model', 'temperature'])['bugsFound'].mean().reset_index()
        average_bugsfound.rename(columns={'bugsFound': 'averageBugsFound'}, inplace=True)
        average_bugsfound = average_bugsfound.sort_values(by=['model', 'temperature'])

        # Merge all metrics into a single data frame
        merged_df = (
            average_covered_instructions
            .merge(average_covered_edges, on=['model', 'temperature'])
            .merge(average_defusechain, on=['model', 'temperature'])
            .merge(average_bugsfound, on=['model', 'temperature'])
        )

        # Melt the data for Seaborn compatibility
        melted_df = merged_df.melt(
            id_vars=['model', 'temperature'],
            value_vars=['averageCoveredInstructions', 'averageCoveredEdges', 'averageCoveredDefUseChains', 'averageBugsFound'],
            var_name='Metric',
            value_name='Value'
        )

        # Create the FacetGrid with shared y-axis
        g = sns.FacetGrid(
            melted_df, 
            col='model', 
            col_wrap=3, 
            sharey=True,  # Ensure y-axis is shared across all facets
            height=4, 
            aspect=1.5
        )
        g.map(sns.lineplot, 'temperature', 'Value', 'Metric', marker='o')

        # Customize the plot
        g.add_legend(title='Metrics')
        g.set_axis_labels('Temperature', 'Value')
        g.set_titles('Model: {col_name}')
        plt.subplots_adjust(top=0.9)
        g.fig.suptitle('Metrics Trends by Model and Temperature (Uniform Y-Axis)')

        # Optional: Add grid lines for easier comparison
        for ax in g.axes.flat:
            ax.grid(alpha=0.3)

        plt.savefig('scatter_plot_coverage_2.png', dpi=800)        